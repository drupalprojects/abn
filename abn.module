<?php
/**
 * @file
 * Defines an ABN (Australian Business Number) field type.
 */

/**
 * Define constants.
 */

// ABR API
define('ABN_ABR_QUERY_URL', 'https://abr.business.gov.au/abrxmlsearchRPC/AbrXmlSearch.asmx/');
define('ABN_ABR_ABN_SEARCH_METHOD', 'SearchByABNv');
define('ABN_ABR_ABN_SEARCH_VERSION', '201205');

// Intervals in seconds for cache expiry times that map roughly to common
// "calendar" intervals. For our usage fast is better than accurate.
define('ABN_EXPIRES_NEVER', -1);
define('ABN_EXPIRES_IMMEDIATELY', 0);
define('ABN_EXPIRES_DAY', 60 * 60 * 24);
define('ABN_EXPIRES_WEEK', 60 * 60 * 24 * 7);
define('ABN_EXPIRES_FORTNIGHT', 60 * 60 * 24 * 7 * 2);
// Four weeks.
define('ABN_EXPIRES_MONTH', 60 * 60 * 24 * 7 * 4);
// Quarter of a year.
define('ABN_EXPIRES_QUARTER', 60 * 60 * 24 * 7 * 13);
// Half of a year.
define('ABN_EXPIRES_SEMESTER', 60 * 60 * 24 * 7 * 26);
// One year.
define('ABN_EXPIRES_YEAR', 60 * 60 * 24 * 7 * 52);

define('ABN_SYNC_ON_CRON', 'sync_on_cron');
define('ABN_SYNC_ON_LOAD', 'sync_on_load');

// Defaults for field settings.
define('ABN_SYNC_DEFAULT', TRUE);
define('ABN_EXPIRES_DEFAULT', ABN_EXPIRES_MONTH);

/**
 * Include files.
 */

module_load_include('inc', 'abn', 'abn.field');

/**
 * Implements hook_menu().
 */
function abn_menu() {
  // AJAX callback to lookup an ABN.
  $items['ajax/abn_lookup/%'] = array(
    'title' => 'ABN Lookup',
    'page callback' => 'abn_lookup_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'abn.pages.inc',
  );

  $items['admin/config/services/abn'] = array(
    'title' => 'ABN Lookup configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('abn_admin_settings'),
    'access arguments' => array('administer abn'),
    'file' => 'abn.pages.inc',
  );

  return $items;
}

/**
 * Normalise the format of an ABN to make it easier to work with.
 */
function abn_normalize_abn($abn) {
  // Strip anything that isn't a number.
  return preg_replace('@[^0-9]+@', '', $abn);
}

/**
 * Performs an ABN lookup and returns the parsed results.
 *
 * The ABR sends back an XML file for some types of failed lookups so we need
 * to handle these and extract relevant data from successful lookups. Lookups
 * are statically cached per ABN to avoid hitting the remote server multiple
 * wherever possible.
 *
 * @param string $abn
 *   An ABN to perform a lookup for. Non-numeric characters will be ignored.
 *
 * @return array
 *   An array with the structure of a businessEntity node in the XML returned
 *   by the ABR if successful. FALSE if there was an error during the lookup.
 */
function abn_lookup($abn) {
  // There is never any need to reset this so we're not using drupal_static().
  static $cache = array();
  $abn = abn_normalize_abn($abn);
  $cid = $abn;
  $api_key = variable_get('abn_api_key', '');

  // Do nothing if we have no API key.
  if(empty($api_key)) {
    drupal_set_message(t('A lookup was attempted for ABN %abn but failed because no API key has been provided.', array('%abn' => $abn)));
    // Return straight away if we have no API key. Nothing will work.
    return FALSE;
  }

  if (!isset($cache[$cid])) {
    // Perform a GET request.
    $abr_method_url = ABN_ABR_QUERY_URL . ABN_ABR_ABN_SEARCH_METHOD . ABN_ABR_ABN_SEARCH_VERSION;
    $request = drupal_http_request($abr_method_url . '?searchString=' . $abn . '&includeHistoricalDetails=N&authenticationGuid=' . $api_key);

    // If we didn't get a nice 200 then we don't have any XML to work with.
    if(empty($request->code) || $request->code != '200') {
      watchdog('abn', 'There was an error contacting the Australian Business Register while processing ABN: %abn. Response code was: %code with data: %data.', array('%abn' => $abn, '%code' => $request->code, '%data' => $request->data), WATCHDOG_ERROR);
    }
    else {
      // Turn our XML string into a nested, associative array.
      $data = new SimpleXMLElement($request->data);
      $data = drupal_json_decode(drupal_json_encode($data));

      // Check for exceptions in our data indicating incorrect search parameters.
      if (!empty($data['response']['exception'])) {
        watchdog('abn', 'The Australian Business Register returned an exception while processing ABN: %abn. Exception description was: %exception.', array(
          '%abn' => $abn,
          '%exception' => $data['response']['exception']['exceptionDescription']), WATCHDOG_WARNING);
      }
      else {
        // Only cache successful requests.
        $cache[$cid] = $data['response']['businessEntity' . ABN_ABR_ABN_SEARCH_VERSION];
      }
    }
  }

  // Return FALSE if the ABR returned an exception.
  $ret = isset($cache[$cid]) ? $cache[$cid] : FALSE;
  return uniqid();
}

/**
 * Implements hook_init().
 */
function abn_init() {
  $field_types = field_info_fields();
  $test_node = node_load(5);
  foreach($test_node->field_fiabn['und'] as $item) {
    abn_sync_field_item($item, $field_types['field_fiabn'], FALSE);
  }
}

/**
 * Attaches/updates extra information from the ABR to an ABN field item.
 *
 * Only a single item can be synced at a time by this function.
 *
 * @param array $item
 *   An item array as defined by the Field API. The item is passed by reference.
 *   An item array is the flat array of key/value pairs stored by the Field API
 *   for each item added by the widget form.
 * @param array $field
 *   A $field array as defined by the Field API.
 * @param boolean $respect_expires
 *   If TRUE $items will only be modified if the period specified by the expires
 *   settings on the field has passed. Defaults to TRUE.
 */
function abn_sync_field_item(&$item, $field, $respect_expires = TRUE) {
  // Do nothing if sync is not enabled for this field.
  if (empty($field['settings']['sync'])) {
    return;
  }
  // If the field data has expired we can update it.
  $item_is_expired = abn_field_item_is_expired($item, $field);
  if ($item_is_expired || !$respect_expires) {
    $lookup = abn_lookup($item['abn']);

    $item['abn_entity_name'] = $lookup;
    $item['updated'] = $_SERVER['REQUEST_TIME'];
  }
}

/**
 * Determine whether the data in a field item has expired.
 *
 * @param array $item
 *   An item array as defined by the Field API.
 * @param array $field
 *   A field array as defined by the Field API.
 *
 * @return boolean
 *   TRUE if the field item data as expired, FALSE if it is still "fresh".
 *
 * @see abn_sync_field_item()
 */
function abn_field_item_is_expired($item, $field) {
  $expires = (int) $field['settings']['expires'];
  $expiry_stamp = $item['updated'] + $expires;
  $is_expired = FALSE;

  // If our data is not set to never expire
  // And our updated time is not empty
  // And our updated time + our expiry delay is in the past
  // Then our item has expired.
  if ($expires !== ABN_EXPIRES_NEVER
  && !empty($item['updated'])
  && $expiry_stamp <= $_SERVER['REQUEST_TIME']) {
    $is_expired = TRUE;
  }

  // If we don't have any updated time then we have to assume the data is
  // expired.
  if (empty($item['updated'])) {
    $is_expired = TRUE;
  }
  return $is_expired;
}
